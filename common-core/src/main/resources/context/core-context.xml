<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/tx
     	   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
 		   http://www.springframework.org/schema/aop
		   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/context
		   http://www.springframework.org/schema/context/spring-context-3.0.xsd
		     http://mybatis.org/schema/mybatis-spring 
  http://mybatis.org/schema/mybatis-spring.xsd">

	<context:annotation-config/>
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <!-- <value>classpath:context/*.properties</value> -->
            </list>
        </property>
    </bean>
    <bean id="dataSource" class="com.x.sdk.datasource.XHikariDataSource">
		 <constructor-arg name="dataSourceName" value="1"/>
	</bean>
    <!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
	<!-- <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass
	    <property name="driverClassName" value="${jdbc.driver}" />
	    
		基本属性 url、user、password
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		配置初始化大小、最小、最大
		<property name="initialSize" value="${jdbc.pool.init}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" /> 
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		
		配置获取连接等待超时的时间
		<property name="maxWait" value="60000" />
		
		配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
		配置一个连接在池中最小生存的时间，单位是毫秒
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		
		打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		
		配置监控统计拦截的filters
	    <property name="filters" value="stat" /> 
	</bean>
 -->
    <!-- 配置数据源 -->
  <!--   <bean id="dataSource" class="com.x.centra.sdk.datasource.OptHikariDataSource">
		 <constructor-arg name="dataSourceName" value="slp-common-db"/>
	</bean> -->
    
    <bean id="seqDataSourceLoader" class="com.x.sdk.component.sequence.datasource.SeqDataSourceLoader" init-method="init">
		<property name="ds" ref="dataSource" />
	</bean>
    <!-- 扫描Mapper,需要添加mybatis前缀绑定 -->
	<mybatis:scan base-package="com.x.common.dao.mapper.attach,com.x.common.dao.mapper.interfaces" />
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath*:mybatis/mapper/**/*.xml"/> 
    </bean>
    
    <!-- 配置SqlSessionTemplate -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean>

    <!-- 事务配置 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 使用annotation注解方式配置事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--AOP 事务配置 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <context:component-scan base-package="com.x.common"/>
    <!-- <import resource="elasticjob-context.xml" /> -->
</beans>